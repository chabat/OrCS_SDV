//=========== PROCESSOR =============
SIZE_OF_L1_CACHES_ARRAY = 1;
SIZE_OF_L2_CACHES_ARRAY = 1;    
SIZE_OF_LLC_CACHES_ARRAY = 1;   

//=========== PIPELINE STAGES =============
FETCH_WIDTH = 6;
DECODE_WIDTH = 5;
RENAME_WIDTH = 5;
DISPATCH_WIDTH = 6;
EXECUTE_WIDTH = 8;
COMMIT_WIDTH = 4;
//=============================
FETCH_LATENCY = 3;
DECODE_LATENCY = 3;
RENAME_LATENCY = 3;
DISPATCH_LATENCY = 1;
EXECUTE_LATENCY = 0;
COMMIT_LATENCY = 1;
//========= FUNCTIONAL UNITS RELATED=========
//INTEGER ALU
LATENCY_INTEGER_ALU = 1;
WAIT_NEXT_INT_ALU = 1;
INTEGER_ALU = 3;
//INTEGER MUL
LATENCY_INTEGER_MUL = 3;
WAIT_NEXT_INT_MUL = 1;
INTEGER_MUL = 1;
//INTEGER DIV
LATENCY_INTEGER_DIV = 32;
WAIT_NEXT_INT_DIV = 32;
INTEGER_DIV = 1;

//QTDE_INTEGER_FU (INTEGER_ALU+INTEGER_MUL+INTEGER_DIV)

# //FP ULAS LATENCY 
//FLOATING POINT DIV
LATENCY_FP_DIV = 10;
WAIT_NEXT_FP_DIV = 10;
FP_DIV = 1;
# //FLOATING POINT MUL
LATENCY_FP_MUL = 5;
WAIT_NEXT_FP_MUL = 1;
FP_MUL = 1;
# //FLOATING POINT ALU
LATENCY_FP_ALU = 3;
WAIT_NEXT_FP_ALU = 1;
FP_ALU = 1;

//QTDE_FP_FU (FP_ALU+FP_MUL+FP_DIV)
//=====================

//=====================
//MEMORY FU
//=====================
# //Load Units
LOAD_UNIT = 2;
WAIT_NEXT_MEM_LOAD = 1;
LATENCY_MEM_LOAD = 1;
# //Store Units
STORE_UNIT = 1;
WAIT_NEXT_MEM_STORE = 1;
LATENCY_MEM_STORE = 1;

<<<<<<< HEAD
<<<<<<< HEAD
# //QTDE_MEMORY_FU (LOAD_UNIT+STORE_UNIT)
# //Parallel Loads
=======
=======
>>>>>>> hive
HIVE_UNIT = 1;
WAIT_NEXT_MEM_HIVE = 1;
LATENCY_MEM_HIVE = 1;

//QTDE_MEMORY_FU (LOAD_UNIT+STORE_UNIT)
//Parallel Loads
>>>>>>> 220854c... changes to ram model
PARALLEL_LOADS = 2;
PARALLEL_STORES = 1;

//======================
# ///UNIFIED FUS
# //PROCESSOR BUFFERS SIZE
FETCH_BUFFER = 18;
DECODE_BUFFER = 28;
RAT_SIZE = 260;
ROB_SIZE = 168;
UNIFIED_RS = 54;
# //MOB
MOB_READ = 64;
MOB_WRITE = 36;
MOB_HIVE = 8;

MAX_PARALLEL_REQUESTS_CORE = 10;

//=====================MEMORY DESAMBIGUATION=======================
DISAMBIGUATION_ENABLED = 1;
DISAMBIGUATION_METHOD = "HASHED";
LOAD_HASH_SIZE = 512;
STORE_HASH_SIZE = 512;
DESAMBIGUATION_BLOCK_SIZE = 4;
//SOLVING ADDRESS TO ADDRESS
ADDRESS_TO_ADDRESS = 1;
//REGISTER FORWARD ON EXECUTION
REGISTER_FORWARD = 1;
//=====================MEMORY DESAMBIGUATION=======================

//===========BRANCH PREDICTOR=============
BTB_ENTRIES = 4096;
BTB_WAYS = 4;
BRANCH_PREDICTION_METHOD = "PIECEWISE";

BTB_MISS_PENALITY = 5;
MISSPREDICTION_PENALITY = 16;
N = 128;
M = 128;
H = 43;
//===========END BRANCH PREDICTOR=============
//*************** DEFINES CACHE *****************
//=====================CACHES=======================
//ATTR COMMON
LINE_SIZE = 64;
INSTRUCTION_LEVELS = 1;
DATA_LEVELS = 3;
INSTRUCTION_ENABLED = 1;
//==================== LEVEL 1 =====================
//https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-optimization-manual.pdf
//Valores retirados do manual de otimização
//D$
L1_DATA_SIZE = 32768; // Definir aqui!!!
L1_DATA_ASSOCIATIVITY  = 8;
L1_DATA_LATENCY = 2;
//L1_DATA_SETS (L1_DATA_SIZE/LINE_SIZE)/L1_DATA_ASSOCIATIVITY

//L1_INST_SIZE 32*1024 // Definir aqui!!!
L1_INST_ASSOCIATIVITY = 8;
L1_INST_LATENCY = 2;
//L1_INST_SETS (L1_INST_SIZE/LINE_SIZE)/L1_INST_ASSOCIATIVITY
//==================== LEVEL 1 =====================
//==================== LEVEL 2 =====================
//L2_SIZE 256*1024
L2_ASSOCIATIVITY = 8;
L2_LATENCY = 4;
//L2_SETS (L2_SIZE/LINE_SIZE)/L2_ASSOCIATIVITY
//==================== LEVEL 2 =====================
//==================== LLC     =====================
//LLC_SIZE 4*(1024*2014)
LLC_ASSOCIATIVITY = 20;
LLC_LATENCY = 16;
//LLC_SETS (LLC_SIZE/LINE_SIZE)/LLC_ASSOCIATIVITY
//==================== LLC     =====================
//=====================CACHES=======================

//=====================RAM=======================
CORE_TO_BUS_CLOCK_RATIO = 2.5;
CHANNEL = 4;
RANK = 1;
BANK = 8;
BANK_BUFFER_SIZE = 8;
BANK_ROW_BUFFER_SIZE = 8192;
REQUEST_PRIORITY = "ROW_BUFFER_HITS_FIRST";
WRITE_PRIORITY = "SERVICE_AT_NO_READ";
//ROW_BUFFER (RANK*BANK)*1024
// =====================Parametes Comandd=======================
BURST_WIDTH = 8;
PARALLEL_LIM_ACTIVE = 1; //WTF?! is this for....

TIMING_AL = 0;          // Added Latency for column accesses
## Page 141
TIMING_CAS = 9;         // Column Access Strobe (CL) latency
TIMING_RCD = 9;         // Row to Column comand Delay
TIMING_RC = 33;         // Row Cycle
TIMING_RAS = 24;        // Row Access Strobe
TIMING_RP = 9;          // Row Precharge
TIMING_FAW = 20;        // Four (row) Activation Window
TIMING_RRD = 4;         // Row activation to Row activation Delay
## Page 160
TIMING_CWD = 7;         // Column Write Delay (CWL)
## Page 169
TIMING_RTP = 6;        // Read To Precharge
TIMING_WTR = 6;        // Write To Read delay time
TIMING_WR = 12;         // Write Recovery time
TIMING_CCD = 4;         // Column to Column Delay
//=====================RAM=======================
//=====================PREFETCHER=======================
PREFETCHER_ACTIVE = 0;
# //STRIDE_TABLE_SIZE 32*NUMBER_OF_PROCESSORS
DEGREE = 1;
DISTANCE = 4;
# //PARALLEL_PREFETCH NUMBER_OF_PROCESSORS
# //active prefetchers
STRIDE = 1;
//=====================PREFETCHER=======================


//=====================CHECKS=======================
SANITY_CHECK = 0;
HEARTBEAT = 1;
HEARTBEAT_CLOCKS = 10000000;
//==========DEBUGS
DEBUG = 0;

FETCH_DEBUG = 0;
DECODE_DEBUG = 0;
RENAME_DEBUG = 0;
DISPATCH_DEBUG = 0;
EXECUTE_DEBUG = 0;
MOB_DEBUG = 0;
PRINT_MOB = 0;
PRINT_ROB = 0;
COMMIT_DEBUG = 0;
CACHE_MANAGER_DEBUG = 0;
MEM_CONTROLLER_DEBUG = 0;

PERIODIC_CHECK = 0;
CLOCKS_TO_CHECK = 500;
WAIT_CYCLE = 0;
